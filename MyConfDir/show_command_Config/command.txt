# Docker

* Stop docker engine
sudo systemctl stop docker

* Start docker engine
sudo systemctl start docker

* Stop all container
docker stop $(docker ps -q)

* Stop and delete all container
docker rm -f $(docker ps -aq)

* Delete all non tagged images
docker rmi $(docker images -f "dangling=true" -q)

* Delete all images
docker rmi -f $(docker images -aq)

* Supprimer tous les volumes non utilisés
docker volume prune -f

* Supprimer tous les réseaux non utilisés
docker network prune -f

* Supprimer les images et conteneurs orphelins (dangling)
docker image prune -a -f

* Supprimer tous les volumes
docker volume rm $(docker volume ls -q)

* Nettoyage des données du Docker
rm -rf /var/lib/docker/*

# Kuberantes

* Stop the cluster kubernate
sudo systemctl stop kubelet

* Start the cluster
sudo systemctl start kubelet

# Ansible

* Executer un playbook avec un fichier inventaire
ansible-playbook -i path-to-inventory [-u kone_wolouho --private-key=~/.ssh/idrsa] -e "variable1=Valeur1" -e "variable2=valeur2" path-to-playbook.yml
ansible-playbook -i inventory [-u kone_wolouho --private-key=~/.ssh/idrsa] -e "variable1=Valeur1" -e "variable2=valeur2" playbook.yml

* Executer un playbook avec une ipaddr
ansible-playbook -i "xxx.xxx.xxx.xxx," [-u kone_wolouho --private-key=~/.ssh/idrsa] -e "variable1=Valeur1" -e "variable2=valeur2" path-to-playbook.yml
ansible-playbook -i "xxx.xxx.xxx.xxx," [-u kone_wolouho --private-key=~/.ssh/idrsa] ../ansibleplay/play-system-setup.yml

* Les differentes option de la commande playbook ansible
-u <username> ou --user=<username>
-i <inventory> ou --inventory=<inventory>
--ask-pass : Demande un mot de passe SSH interactif.
--private-key=<path> : Spécifie le chemin de la clé privée pour l'authentification SSH.
-e <key=value> ou --extra-vars=<key=value> : Passe des variables supplémentaires
--extra-vars "@<file>" : Charge des variables à partir d'un fichier JSON ou YAML.

* Creer un role Ansible
ansible-galaxy init nom-du-role

# Terraform

* Initialiser un nouvelle ressource
terraform init

* Voir les changement 
terraform plan

* Apply les changement
terraform apply

* Detruire la ressource
terrraform destroy

# Reseaux Linux

* Afficher l’adresse IP
ip addr show
ifconfig

* Afficher la table de routage 
route -n
ip route show

* Afficher les interfaces réseau 
ip link show

* Tester la connectivité 
ping <adresse>
traceroute <adresse>

* Résoudre un nom de domaine 
nslookup <nom_domaine>
dig <nom_domaine>
host <nom_domaine>

* Voir les connexions actives 
netstat -tuln
ss -tuln

* Afficher les sockets 
lsof -i

# Firewall

* Activer/désactiver le pare-feu
sudo ufw enable
sudo ufw disable

* Autoriser un port
sudo ufw allow <port>
sudo ufw allow <service> # Exemple : sudo ufw allow ssh

* Bloquer un port
sudo ufw deny <port>

* Afficher l’état du pare-feu
sudo ufw status verbose

# Iptables

* Afficher les règles
sudo iptables -L -n -v

* Ajouter une règle pour autoriser un port 
sudo iptables -A INPUT -p tcp --dport <port> -j ACCEPT

* Bloquer un port spécifique
sudo iptables -A INPUT -p tcp --dport <port> -j DROP

* Sauvegarder la configuration
sudo iptables-save > /etc/iptables/rules.v4

* Restaurer une configuration
sudo iptables-restore < /etc/iptables/rules.v4

# Gestion des ports

* Voir si un port est ouvert sur un hote
telnet <adresse_IP> <port>
nc -zv <adresse_IP> <port>
nmap -p <port> <adresse_IP>
curl -I http://<adresse_IP>:<port>


* Scanner les ports (voir les ports ouverts)
nmap <adresse>

* Voir les services sur les ports ouverts 
sudo netstat -tuln
ss -tuln

* Afficher les connexions sur un port spécifique
lsof -i:<port>

* Ouvrir et fermer les ports :
    **Avec ufw**
sudo ufw allow <port>
sudo ufw deny <port>
**Avec iptables**
sudo iptables -A INPUT -p tcp --dport <port> -j ACCEPT
sudo iptables -A INPUT -p tcp --dport <port> -j DROP

# Gestion des Ressources

* Afficher l’utilisation CPU
top
htop

* Afficher l’utilisation de la RAM
free -h

* Afficher l’utilisation du disque
df -h
du -h <chemin>

* Afficher les dossiers les plus volumineux 
du -ah <chemin> | sort -rh | head -n 10



# Script executable

* Purger Docker
/home/albarry/Bureau/DevOps/MyConfDir/Executing_Scripts/purgeDocker.sh
